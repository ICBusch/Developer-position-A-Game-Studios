# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
#  unity.username: 'ian.busch@buschfire.ca'
#  unity.password: 'CrosbieRoxy12!'
  runTests: false
  unity.projectPath: "$(System.DefaultWorkingDirectory)/A-Grade-Studio-Application/"
# unity.installComponents: 'Windows, UWP, WebGL'
  unity.installComponents: 'Windows, WebGL'
  unity.installFolder: 'C:/Program Files/Unity/Hub/Editor/'

trigger:
- main

pool: 
  name: 'Unity Windows Agents'
  #vmImage: windows-latest

jobs:
  - job: unity
    displayName: Unity Build
    variables:
      installCached: false
    
    condition: or(not(variables['unity.username']),  not(variables['unity.password']), false)
    steps:
      - task: UnityGetProjectVersionTask@1
        name: unitygetprojectversion
        displayName: Calling UnityGetProjectVersionV1 from unity-azure-pipeline-task extension
        inputs:
          unityProjectPath: '$(unity.projectPath)'
      
      - task: CacheBeta@0
        displayName: Check if Unity installation is cached
        inputs:
          key: $(Agent.OS) | "$(unitygetprojectversion.projectVersion)" | "$(unity.installComponents)"
          path: "$(unity.installFolder)$(unitygetprojectversion.projectVersion)"
          cacheHitVar: installCached
      
      - task: PowerShell@2
        displayName: Install Unity
        condition: and(succeeded(), ne(variables['installCached'], true))
        inputs:
          targetType: inline
          script:  |
            Install-Module UnitySetup -Force -Verbose

      - task: PowerShell@2
        displayName: Installing Unity Components '$(unity.installComponents)'
        condition: and(succeeded(), ne(variables['installCached'], true))
        inputs:
          targetType: 'inline'
          script: 'Install-UnitySetupInstance -Installers (Find-UnitySetupInstaller -Version ''$(unitygetprojectversion.projectVersion)'' -Components $(unity.installComponents)) -Verbose'

      # - task: UnityCMDTask@1
      #   inputs:
      #     unityProjectPath: '$(unity.projectPath)'
      #     cmdArgs: '-quit -nographics -username $(unity.username) -password $(unity.password)'

      - task: UnityTestTask@1
        name: unitytest
        inputs:
          testMode: editMode
          unityEditorsPathMode: 'specify'
          customUnityEditorsPath: '$(unity.installFolder)'
          unityProjectPath: '$(unity.projectPath)'
          additionalCmdArgs: '-username $(unity.username) -password $(unity.password)'

      - script: |
          echo '$(unitytest.testResultsOutputPathAndFileName)'
      
      # - task: UnityActivateLicenseTask@1
      #   displayName: Calling UnityActivateLicenseTask@1
      #   inputs:
      #     username: '$(unity.username)'
      #     password: '$(unity.password)'
      #     unityEditorsPathMode: 'unityHub'
      #     unityProjectPath: '$(unity.projectPath)'
      #     serial: ""